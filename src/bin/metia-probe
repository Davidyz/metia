#!/usr/bin/env python3
import os
import sys
from typing import Dict, List, Union
from metia.probe import Probe

__INDENT_STRING = '  '

def pprint_list(info: List, indentation: int) -> None:
    indent_str = indentation * __INDENT_STRING
    for i in info:
        if isinstance(i, list):
            pprint_list(i, indentation+1)
        elif isinstance(i, dict):
            pprint_dict(i, indentation)
        else:
            print(f'{indent_str}{i}')

def pprint_dict(
    info: Dict[str, Union[Dict, str]], indentation: int = 0
) -> None:
    """
    Print the metadata of the media in a nice format.
    """
    indent_str = __INDENT_STRING* indentation
    for key in sorted(info.keys()):
        value = info[key]
        if isinstance(value, dict):
            print(f"{indent_str}{key}:")
            pprint_dict(value, indentation + 1)
        elif isinstance(value, list):
            print(f"{indent_str}{key}:")
            pprint_list(sorted(value), indentation + 1)
        else:
            print(f"{indent_str}{key}: {value}")


def print_media(media: Probe):
    """
    Driver function for pprint()
    """
    print(media.path)
    print(len(media.path) * "=")
    pprint_dict(media.dict())


def main():
    print("A tool to visualize the metadata of a media file.")
    if len(sys.argv) == 1:
        print("Usage: media-probe [PATH_TO_MEDIA]")
        sys.exit(1)
    elif len(sys.argv) == 2:
        path = sys.argv[1]
        if not os.path.isfile(path):
            print(f"Not a valid path: {path}")
            sys.exit(1)
        #  try:
        meta = Probe(path)
        print_media(meta)
        #  except Exception:
            #  print(f"Not a valid media file: {path}")
            #  sys.exit(1)

if __name__ == '__main__':
    main()
